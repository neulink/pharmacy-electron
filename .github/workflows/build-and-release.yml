name: Build and Release Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  id-token: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Windows Build Environment
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
        shell: powershell

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: pnpm run build:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm run build:win
        env:
          DEBUG: electron-builder
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: |
            dist/*.dmg
            dist/*.zip
            dist/latest-mac.yml
          retention-days: 30

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: |
            dist/*.exe
            dist/latest.yml
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          echo "Checking if release $TAG exists..."
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "Release $TAG already exists, deleting and recreating"
            echo "exists=true" >> $GITHUB_OUTPUT
            gh release delete "$TAG" --yes --cleanup-tag
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release_cli
        continue-on-error: true
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          RELEASE_NAME="Neulink Pharmacy v${{ steps.get_version.outputs.version }}"

          echo "Creating release $TAG..."
          gh release create "$TAG" \
            --title "$RELEASE_NAME" \
            --notes "Automated build release for Neulink Pharmacy v${{ steps.get_version.outputs.version }}" \
            ./artifacts/macos-app/* \
            ./artifacts/windows-app/*  # Removed ./artifacts/linux-app/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback Release (Softprops)
        if: steps.create_release_cli.outcome == 'failure'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Neulink Pharmacy v${{ steps.get_version.outputs.version }}
          body: Automated fallback release.
          files: |
            ./artifacts/macos-app/*
            ./artifacts/windows-app/*  # Removed ./artifacts/linux-app/*

      - name: Notify Slack (Success)
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "GitHub Actions"
          SLACK_COLOR: good
          SLACK_TITLE: "üéâ Release Successful for ${{ github.repository }}"
          SLACK_MESSAGE: "üöÄ New release v${{ steps.get_version.outputs.version }} created successfully for ${{ github.repository }}!"
          SLACK_FOOTER: "Neulink GitHub Actions"

      - name: Notify Slack (Failure)
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "GitHub Actions"
          SLACK_COLOR: danger
          SLACK_TITLE: "‚ùå Release Failed for ${{ github.repository }}"
          SLACK_MESSAGE: "Release v${{ steps.get_version.outputs.version }} failed during build/release!"
          SLACK_FOOTER: "Neulink GitHub Actions"

      - name: Trigger Website Sync Workflow
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ secrets.NEULINK_SYNC_TOKEN }}
        run: |
          echo "Triggering website sync workflow..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/neulink/pharmacy-electron/actions/workflows/publish-downloads.yml/dispatches \
            -d '{"ref":"main"}'
